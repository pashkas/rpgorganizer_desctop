<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:pc="http://schemas.microsoft.com/prototyping/2010/controls"
    xmlns:system="clr-namespace:System;assembly=mscorlib"
    mc:Ignorable="d">

    <Style TargetType="{x:Type ItemsPresenter}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    </Style>
    <Style TargetType="{x:Type ContentPresenter}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    </Style>
    <Style TargetType="{x:Type ContentControl}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    </Style>
    <Style TargetType="{x:Type ListItem}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    </Style>
    <Style TargetType="{x:Type Window}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    </Style>
    <Style TargetType="{x:Type StackPanel}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    </Style>
    <Style TargetType="{x:Type DockPanel}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    </Style>
    <Style TargetType="{x:Type Border}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    </Style>
    <Style TargetType="{x:Type ScrollViewer}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    </Style>
    <Style TargetType="{x:Type UserControl}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    </Style>
    <Style TargetType="{x:Type WrapPanel}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    </Style>
    <Style TargetType="{x:Type ItemsControl}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    </Style>
    <Style TargetType="{x:Type ListBox}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    </Style>
    <Style TargetType="{x:Type Grid}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    </Style>
    <Style TargetType="{x:Type ListBoxItem}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    </Style>
    <Style TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    </Style>
    <Style TargetType="{x:Type ComboBoxItem}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    </Style>
    <Style TargetType="{x:Type TextBox}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    </Style>


    <!--  SimpleStyles.XAML определяет набор стилей элементов управления, которые можно использовать в качестве упрощенных начальных точек для создания собственных элементов управления  -->

    <!--
        Кисти: используются для определения цвета фона, переднего плана, выделения, включенных и иных областей всех элементов управления
        Для изменения цвета элемента управления достаточно изменить соответствующую кисть; для добавления новой фигуры или изменения компоновки потребуется также изменить шаблон
    -->


    <!--  Для определения каждой части элемента управления используется пара "стиль-шаблон"  -->
    <!--  Стиль определяет значения по умолчанию для элемента управления; шаблон предоставляет элементы для каждого элемента управления  -->

    <!--  NormalBrush используется для фона кнопок SimpleButton, SimpleRepeatButton  -->
    <LinearGradientBrush x:Key="NormalBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0.0" Color="#EEE" />
        <GradientStop Offset="1.0" Color="#CCC" />
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="NormalBorderBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0.0" Color="#CCC" />
        <GradientStop Offset="1.0" Color="#444" />
    </LinearGradientBrush>

    <!--  LightBrush используется для фона областей содержимого, таких как Menu, TabControl  -->
    <LinearGradientBrush x:Key="LightBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0.0" Color="#FFF" />
        <GradientStop Offset="1.0" Color="#EEE" />
    </LinearGradientBrush>

    <!--  MouseOverBrush используется для события MouseOver в кнопках, переключателях, элементах управления CheckBox  -->
    <LinearGradientBrush x:Key="MouseOverBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0.0" Color="#FFF" />
        <GradientStop Offset="1.0" Color="#AAA" />
    </LinearGradientBrush>

    <!--  PressedBrush используется для события Pressed в кнопках, переключателях, элементах управления CheckBox  -->
    <LinearGradientBrush x:Key="PressedBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0.0" Color="#BBB" />
        <GradientStop Offset="0.1" Color="#EEE" />
        <GradientStop Offset="0.9" Color="#EEE" />
        <GradientStop Offset="1.0" Color="#FFF" />
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="PressedBorderBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0.0" Color="#444" />
        <GradientStop Offset="1.0" Color="#888" />
    </LinearGradientBrush>

    <!--  SelectedBackgroundBrush используется для выделенного элемента в элементах ListBoxItem, ComboBoxItem  -->
    <SolidColorBrush x:Key="SelectedBackgroundBrush" Color="#DDD" />

    <!--  Отключенные кисти используются для внешнего вида отключенных элементов управления  -->
    <SolidColorBrush x:Key="DisabledForegroundBrush" Color="#888" />
    <SolidColorBrush x:Key="DisabledBackgroundBrush" Color="#EEE" />
    <SolidColorBrush x:Key="DisabledBorderBrush" Color="#AAA" />

    <!--  Используется для фона элементов управления ScrollViewer, TreeView, ListBox, Expander, TextBox, Tab Control  -->
    <SolidColorBrush x:Key="WindowBackgroundBrush" Color="#FFF" />

    <!--  DefaultedBorderBrush используется для отображения фокуса KeyBoardFocus  -->
    <LinearGradientBrush x:Key="DefaultedBorderBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0.0" Color="#777" />
        <GradientStop Offset="1.0" Color="#000" />
    </LinearGradientBrush>

    <SolidColorBrush x:Key="SolidBorderBrush" Color="#888" />
    <SolidColorBrush x:Key="LightBorderBrush" Color="#AAA" />
    <SolidColorBrush x:Key="LightColorBrush" Color="#DDD" />

    <!--  Используется для глифов флажков, переключателей, TreeViewItem, Expander, ToggleButton  -->
    <SolidColorBrush x:Key="GlyphBrush" Color="#444" />


    <!--  SimpleButtonFocusVisual используется для отображения фокуса клавиатуры на элементе управления SimpleButton  -->
    <Style x:Key="SimpleButtonFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle
                            Margin="2"
                            Stroke="#60000000"
                            StrokeDashArray="1 2"
                            StrokeThickness="1" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  SimpleButton — этот элемент управления задает кисти для каждого состояния. Обратите внимание, что эти кисти должны быть перечислены выше, поскольку они являются статическими ресурсами  -->
    <Style
        x:Key="SimpleButton"
        BasedOn="{x:Null}"
        TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{DynamicResource SimpleButtonFocusVisual}" />
        <Setter Property="Background" Value="{DynamicResource NormalBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">

                    <!--  В качестве корневого элемента используется Grid, поскольку так проще добавлять дополнительные элементы для настройки кнопки  -->
                    <Grid x:Name="Grid">
                        <Border
                            x:Name="Border"
                            Padding="{TemplateBinding Padding}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}" />

                        <!--  ContentPresenter — это область, где элемент управления размещает текстовое и другое содержимое  -->
                        <!--  Привязки полезны тем, что можно задавать параметры элемента управления, не изменяя шаблон  -->
                        <ContentPresenter
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            RecognizesAccessKey="True" />
                    </Grid>

                    <!--  Каждое состояние устанавливает кисть на границе (Border) шаблона  -->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DefaultedBorderBrush}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource MouseOverBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource PressedBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource PressedBorderBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="true" />
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="RadioButtonFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle
                            Margin="15,0,0,0"
                            Stroke="#60000000"
                            StrokeDashArray="1 2"
                            StrokeThickness="1" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CheckBoxFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle
                            Margin="15,0,0,0"
                            Stroke="#60000000"
                            StrokeDashArray="1 2"
                            StrokeThickness="1" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Простой флажок (CheckBox)  -->
    <Style x:Key="SimpleCheckBox" TargetType="{x:Type CheckBox}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="FocusVisualStyle" Value="{DynamicResource CheckBoxFocusVisual}" />
        <Setter Property="Background" Value="{DynamicResource NormalBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">

                    <!--  BulletDecorator используется для выравнивания флажка и содержимого по базовой линии  -->
                    <BulletDecorator Background="Transparent">
                        <BulletDecorator.Bullet>
                            <Grid Width="13" Height="13">
                                <Border
                                    x:Name="Border"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}" />
                                <Path
                                    x:Name="CheckMark"
                                    Data="M 0 0 L 13 13 M 0 13 L 13 0"
                                    SnapsToDevicePixels="False"
                                    Stroke="{DynamicResource GlyphBrush}"
                                    StrokeThickness="2" />
                            </Grid>
                        </BulletDecorator.Bullet>
                        <ContentPresenter
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            RecognizesAccessKey="True" />
                    </BulletDecorator>

                    <!--  Свойство видимости (Visibility) используется для скрытия и отображения флажка (CheckMark) в зависимости от события IsChecked  -->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="false">
                            <Setter TargetName="CheckMark" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource MouseOverBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource PressedBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource PressedBorderBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Простой переключатель  -->
    <Style x:Key="SimpleRadioButton" TargetType="{x:Type RadioButton}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="FocusVisualStyle" Value="{DynamicResource RadioButtonFocusVisual}" />
        <Setter Property="Background" Value="{DynamicResource NormalBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">

                    <!--  BulletDecorator используется для выравнивания флажка и содержимого по базовой линии  -->
                    <BulletDecorator Background="Transparent">
                        <BulletDecorator.Bullet>
                            <Grid Width="13" Height="13">
                                <Ellipse
                                    x:Name="Ellipse_Border"
                                    Fill="{TemplateBinding Background}"
                                    Stroke="{TemplateBinding BorderBrush}"
                                    StrokeThickness="1" />
                                <Ellipse
                                    x:Name="CheckMark"
                                    Margin="4"
                                    Fill="{DynamicResource GlyphBrush}" />
                            </Grid>
                        </BulletDecorator.Bullet>
                        <ContentPresenter
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            RecognizesAccessKey="True" />
                    </BulletDecorator>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="false">
                            <Setter TargetName="CheckMark" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Ellipse_Border" Property="Fill" Value="{DynamicResource MouseOverBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Ellipse_Border" Property="Fill" Value="{DynamicResource PressedBrush}" />
                            <Setter TargetName="Ellipse_Border" Property="Stroke" Value="{DynamicResource GlyphBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Ellipse_Border" Property="Fill" Value="{DynamicResource DisabledBackgroundBrush}" />
                            <Setter TargetName="Ellipse_Border" Property="Stroke" Value="#40000000" />
                            <Setter Property="Foreground" Value="#80000000" />
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Простая кнопка повторения (SimpleRepeatButton) используется простой полосой прокрутки (SimpleScrollBar) для кнопок "Вверх" и "Вниз"  -->
    <Style
        x:Key="SimpleRepeatButton"
        d:IsControlPart="True"
        BasedOn="{x:Null}"
        TargetType="{x:Type RepeatButton}">
        <Setter Property="Background" Value="{DynamicResource NormalBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid>
                        <Border
                            x:Name="Border"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}" />
                        <ContentPresenter
                            x:Name="ContentPresenter"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Content="{TemplateBinding Content}"
                            ContentTemplate="{TemplateBinding ContentTemplate}"
                            ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DefaultedBorderBrush}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource MouseOverBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource PressedBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource PressedBorderBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Простой ползунок: ползунок (Thumb) — перетаскиваемый элемент полосы прокрутки (Scrollbar)  -->
    <Style
        x:Key="SimpleThumbStyle"
        d:IsControlPart="True"
        BasedOn="{x:Null}"
        TargetType="{x:Type Thumb}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Grid x:Name="Grid" Margin="0,0,0,0">
                        <Rectangle
                            x:Name="Rectangle"
                            Width="Auto"
                            Height="Auto"
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="Stretch"
                            Fill="{DynamicResource NormalBrush}"
                            RadiusX="2"
                            RadiusY="2"
                            Stroke="{DynamicResource NormalBorderBrush}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True" />
                        <Trigger Property="IsMouseOver" Value="True" />
                        <Trigger Property="IsEnabled" Value="False" />
                        <Trigger Property="IsDragging" Value="True" />
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Стиль "Простая кнопка повторения" (SimpleScrollRepeatButtonStyle): эта кнопка повторения (RepeatButton) используется над и под ползунком в полосе прокрутки. Они настраиваются прозрачными, чтобы их не было видно поверх полосы прокрутки  -->
    <Style
        x:Key="SimpleScrollRepeatButtonStyle"
        d:IsControlPart="True"
        TargetType="{x:Type RepeatButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid>
                        <Rectangle
                            Fill="{TemplateBinding Background}"
                            Stroke="{TemplateBinding BorderBrush}"
                            StrokeThickness="{TemplateBinding BorderThickness}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Простая полоса прокрутки (SimpleScrollBar) использует элементы SimpleThumb, SimpleRepeatButton и SimpleScrollRepeatButton  -->

    <Style x:Key="SimpleScrollBar" TargetType="{x:Type ScrollBar}">
        <Setter Property="Stylus.IsFlicksEnabled" Value="false" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Grid
                        x:Name="GridRoot"
                        Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"
                        Background="{TemplateBinding Background}">
                        <Grid.RowDefinitions>
                            <RowDefinition MaxHeight="18" />
                            <RowDefinition Height="0.00001*" />
                            <RowDefinition MaxHeight="18" />
                        </Grid.RowDefinitions>

                        <RepeatButton
                            x:Name="DecreaseRepeat"
                            Command="ScrollBar.LineUpCommand"
                            Style="{DynamicResource SimpleRepeatButton}">
                            <Grid>
                                <Path
                                    x:Name="DecreaseArrow"
                                    Data="M 0 4 L 8 4 L 4 0 Z"
                                    Stroke="{TemplateBinding Foreground}"
                                    StrokeThickness="1" />
                            </Grid>
                        </RepeatButton>

                        <!--  Дорожка (Track) — это особый контейнер для компоновки, который задает размеры ползунка и кнопок повторения, которые осуществляют прокрутку в одну или в другую сторону  -->
                        <Track
                            x:Name="PART_Track"
                            Grid.Row="1"
                            IsDirectionReversed="true"
                            Orientation="Vertical">
                            <Track.Thumb>
                                <Thumb Style="{DynamicResource SimpleThumbStyle}" />
                            </Track.Thumb>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton
                                    x:Name="PageUp"
                                    Command="ScrollBar.PageDownCommand"
                                    Style="{DynamicResource SimpleScrollRepeatButtonStyle}" />
                            </Track.IncreaseRepeatButton>
                            <Track.DecreaseRepeatButton>
                                <RepeatButton
                                    x:Name="PageDown"
                                    Command="ScrollBar.PageUpCommand"
                                    Style="{DynamicResource SimpleScrollRepeatButtonStyle}" />
                            </Track.DecreaseRepeatButton>
                        </Track>

                        <RepeatButton
                            x:Name="IncreaseRepeat"
                            Grid.Row="2"
                            Command="ScrollBar.LineDownCommand"
                            Style="{DynamicResource SimpleRepeatButton}">
                            <Grid>
                                <Path
                                    x:Name="IncreaseArrow"
                                    Data="M 0 0 L 4 4 L 8 0 Z"
                                    Stroke="{TemplateBinding Foreground}"
                                    StrokeThickness="1" />
                            </Grid>
                        </RepeatButton>
                    </Grid>

                    <!--
                        Этот раздел использует единый шаблон для полосы прокрутки (ScrollBar) и поворачивает его в горизонтальное положение (Horizontal)
                        Он также изменяет команды, чтобы команды "Вверх" и "Вниз" заменялись командами "Влево" и "Вправо"
                    -->
                    <ControlTemplate.Triggers>
                        <Trigger Property="Orientation" Value="Horizontal">

                            <!--  Поворот полосы прокрутки (ScrollBar) из вертикального в горизонтальное положение  -->
                            <Setter TargetName="GridRoot" Property="LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="-90" />
                                </Setter.Value>
                            </Setter>

                            <!--  Дорожка (Track) имеет внутреннюю привязку к ориентации (Orientation), поэтому необходимо повернуть ее обратно в вертикальное положение (Vertical)  -->
                            <Setter TargetName="PART_Track" Property="Orientation" Value="Vertical" />

                            <!--  Изменение команд для их выполнения при горизонтальном положении  -->
                            <Setter TargetName="DecreaseRepeat" Property="Command" Value="ScrollBar.LineLeftCommand" />
                            <Setter TargetName="IncreaseRepeat" Property="Command" Value="ScrollBar.LineRightCommand" />
                            <Setter TargetName="PageDown" Property="Command" Value="ScrollBar.PageLeftCommand" />
                            <Setter TargetName="PageUp" Property="Command" Value="ScrollBar.PageRightCommand" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--
        Простая область с прокруткой (ScrollViewer)
        ScrollViewer — это элемент управления "Сетка" (Grid) с элементом ContentPresenter, а также с горизонтальной и вертикальной полосами прокрутки (ScrollBar)
        Он используется в элементах управления ListBox, MenuItem, ComboBox и TreeView
    -->
    <Style
        x:Key="SimpleScrollViewer"
        BasedOn="{x:Null}"
        TargetType="{x:Type ScrollViewer}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <ScrollContentPresenter
                            Grid.Row="0"
                            Grid.Column="0"
                            Margin="{TemplateBinding Padding}"
                            CanContentScroll="{TemplateBinding CanContentScroll}"
                            Content="{TemplateBinding Content}"
                            ContentTemplate="{TemplateBinding ContentTemplate}" />
                        <ScrollBar
                            x:Name="PART_VerticalScrollBar"
                            Grid.Row="0"
                            Grid.Column="1"
                            Maximum="{TemplateBinding ScrollableHeight}"
                            Minimum="0"
                            Orientation="Vertical"
                            Style="{DynamicResource SimpleScrollBar}"
                            ViewportSize="{TemplateBinding ViewportHeight}"
                            Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                            Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />

                        <!--  Видимость полос прокрутки (ScrollBars) управляется реализацией элемента управления  -->
                        <ScrollBar
                            x:Name="PART_HorizontalScrollBar"
                            Grid.Row="1"
                            Grid.Column="0"
                            Maximum="{TemplateBinding ScrollableWidth}"
                            Minimum="0"
                            Orientation="Horizontal"
                            Style="{DynamicResource SimpleScrollBar}"
                            ViewportSize="{TemplateBinding ViewportWidth}"
                            Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
                            Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Простой список (ListBox) использует простую область с прокруткой (SimpleScrollViewer) для обеспечения прокрутки элементов и простой элемент списка (SimpleListBoxItem) для определения внешнего вида каждого элемента  -->
    <Style x:Key="SimpleListBox" TargetType="{x:Type ListBox}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="Background" Value="{DynamicResource WindowBackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource SolidBorderBrush}" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBox}">
                    <Grid>
                        <Border
                            x:Name="Border"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}" />
                        <ScrollViewer
                            Margin="1"
                            Background="{TemplateBinding Background}"
                            Focusable="false"
                            Style="{DynamicResource SimpleScrollViewer}">

                            <!--  StackPanel используется для отображения дочерних элементов путем установки значения True в свойстве IsItemsHost  -->
                            <StackPanel Margin="2" IsItemsHost="true" />

                        </ScrollViewer>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" />
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Простой элемент списка (SimpleListBoxItem) используется для каждого элемента (Item) в списке (ListBox). Содержимое элемента помещается в ContentPresenter  -->

    <Style
        x:Key="SimpleListBoxItem"
        d:IsControlPart="True"
        TargetType="{x:Type ListBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Grid SnapsToDevicePixels="true">
                        <Border
                            x:Name="Border"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}" />
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Grid>
                    <ControlTemplate.Triggers>

                        <!--  Чтобы установить цвет выделения для элементов, следует изменить значение SelectedBackgroundBrush для свойства IsSelected  -->
                        <Trigger Property="IsSelected" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource SelectedBackgroundBrush}" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Простая раскрывающаяся кнопка переключения (ExpanderToggleButton) — используется элементом управления Expander. Ее включение или выключение приводит к переключению видимости стрелки вверх (Up_Arrow) и стрелки вниз (Down_Arrow)  -->
    <ControlTemplate x:Key="ExpanderToggleButton" TargetType="{x:Type ToggleButton}">
        <Grid>
            <Rectangle
                x:Name="Rectangle"
                Margin="0,0,0,0"
                Fill="Transparent"
                Stroke="{DynamicResource NormalBorderBrush}" />
            <Path
                x:Name="Up_Arrow"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                Data="M 0 0 L 4 4 L 8 0 Z"
                Fill="{DynamicResource GlyphBrush}" />
            <Path
                x:Name="Down_Arrow"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                Data="M 0 4 L 4 0 L 8 4 Z"
                Fill="{DynamicResource GlyphBrush}"
                Visibility="Collapsed" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter TargetName="Rectangle" Property="Fill" Value="{DynamicResource MouseOverBrush}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
                <Setter TargetName="Rectangle" Property="Fill" Value="{DynamicResource PressedBrush}" />
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter TargetName="Down_Arrow" Property="Visibility" Value="Visible" />
                <Setter TargetName="Up_Arrow" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="Rectangle" Property="Fill" Value="{DynamicResource DisabledBackgroundBrush}" />
                <Setter TargetName="Rectangle" Property="Stroke" Value="{DynamicResource DisabledBorderBrush}" />
                <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
                <Setter TargetName="Up_Arrow" Property="Fill" Value="{DynamicResource DisabledForegroundBrush}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--
        Простой элемент управления Expander (SimpleExpander)
        Использует более простой элемент управления ExpanderToggleButton. Устанавливает видимость (Visibility) в элементе управления ContentPresenter для разворачивания
        Ограничения: элемент управления SimpleExpander разворачивается только вниз
    -->
    <Style x:Key="SimpleExpander" TargetType="{x:Type Expander}">
        <Setter Property="Background" Value="{DynamicResource LightBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition x:Name="ContentRow" Height="*" />
                        </Grid.RowDefinitions>
                        <Border
                            x:Name="Border"
                            Grid.Row="0"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="2,2,0,0">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="20" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>
                                <ToggleButton
                                    Background="{DynamicResource NormalBrush}"
                                    IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                    OverridesDefaultStyle="True"
                                    Template="{DynamicResource ExpanderToggleButton}" />
                                <ContentPresenter
                                    Grid.Column="1"
                                    Margin="4"
                                    ContentSource="Header"
                                    RecognizesAccessKey="True" />
                            </Grid>
                        </Border>
                        <Border
                            x:Name="ExpandSite"
                            Grid.Row="1"
                            Background="{DynamicResource WindowBackgroundBrush}"
                            BorderBrush="{DynamicResource SolidBorderBrush}"
                            BorderThickness="1,0,1,1"
                            CornerRadius="0,0,2,2"
                            Visibility="Collapsed">
                            <ContentPresenter
                                Margin="{TemplateBinding Padding}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                Focusable="false" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="True">
                            <Setter TargetName="ExpandSite" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Кнопка переключения простого поля со списком (ComboBoxToggleButton) используется в элементе управления ComboBox для развертывания и свертывания всплывающего списка в поле со списком (ComboBox)  -->
    <ControlTemplate x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="20" />
            </Grid.ColumnDefinitions>
            <Rectangle
                x:Name="Rectangle"
                Grid.ColumnSpan="2"
                Width="Auto"
                Height="Auto"
                HorizontalAlignment="Stretch"
                VerticalAlignment="Stretch"
                Fill="{DynamicResource NormalBrush}"
                RadiusX="5"
                RadiusY="5"
                Stroke="{DynamicResource NormalBorderBrush}" />
            <Rectangle
                Grid.Column="0"
                Width="Auto"
                Height="Auto"
                HorizontalAlignment="Stretch"
                VerticalAlignment="Stretch"
                Fill="{DynamicResource WindowBackgroundBrush}"
                RadiusX="5"
                RadiusY="5"
                Stroke="{DynamicResource NormalBorderBrush}" />
            <Path
                x:Name="Arrow"
                Grid.Column="1"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                Data="M 0 0 L 4 4 L 8 0 Z"
                Fill="{DynamicResource GlyphBrush}" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter TargetName="Rectangle" Property="Fill" Value="{DynamicResource MouseOverBrush}" />
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter TargetName="Rectangle" Property="Fill" Value="{DynamicResource PressedBrush}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="Rectangle" Property="Fill" Value="{DynamicResource DisabledBackgroundBrush}" />
                <Setter TargetName="Rectangle" Property="Stroke" Value="{DynamicResource DisabledBorderBrush}" />
                <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
                <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource DisabledForegroundBrush}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--  Это область, содержащая выбранный элемент в поле со списком (ComboBox)  -->

    <ControlTemplate x:Key="ComboBoxTextBox" TargetType="{x:Type TextBox}">
        <!--  Имя этого элемента должно быть PART_ContentHost  -->
        <Border
            x:Name="PART_ContentHost"
            Background="{TemplateBinding Background}"
            Focusable="False" />
    </ControlTemplate>

    <!--
        Простое поле со списком (SimpleComboBox)
        Использует элементы управления ComboBoxToggleButton для развертывания и свертывания всплывающего элемента управления (Popup),
        SimpleScrollViewer для обеспечения прокрутки элементов и SimpleComboBoxItem для определения внешнего вида каждого элемента
        Элемент управления Popup отображает список элементов в элементе управления StackPanel
    -->

    <Style x:Key="SimpleComboBox" TargetType="{x:Type ComboBox}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid>
                        <ContentPresenter
                            x:Name="ContentSite"
                            Margin="3,3,23,3"
                            HorizontalAlignment="Left"
                            VerticalAlignment="Center"
                            Content="{TemplateBinding SelectionBoxItem}"
                            ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                            ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                            IsHitTestVisible="False" />

                        <!--  Текстовому полю (TextBox) должно быть присвоено имя PART_EditableTextBox, иначе поле со списком (ComboBox) не распознает его  -->
                        <TextBox
                            x:Name="PART_EditableTextBox"
                            Margin="3,3,23,3"
                            HorizontalAlignment="Left"
                            VerticalAlignment="Center"
                            Background="Transparent"
                            Focusable="True"
                            IsReadOnly="{TemplateBinding IsReadOnly}"
                            Style="{x:Null}"
                            Template="{DynamicResource ComboBoxTextBox}"
                            Visibility="Hidden" />

                        <!--  Всплывающий элемент управления (Popup) отображает список элементов в поле со списком (ComboBox). Состояние IsOpen привязано к данным состояния IsDropDownOpen, которое переключается с помощью элемента управления ComboBoxToggleButton  -->
                        <Popup
                            x:Name="Popup"
                            AllowsTransparency="True"
                            Focusable="False"
                            IsOpen="{TemplateBinding IsDropDownOpen}"
                            Placement="Bottom"
                            PopupAnimation="Slide">
                            <Grid
                                x:Name="DropDown"
                                MinWidth="{TemplateBinding ActualWidth}"
                                MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                SnapsToDevicePixels="True">
                                <Border
                                    x:Name="DropDownBorder"
                                    Background="{DynamicResource WindowBackgroundBrush}"
                                    BorderBrush="{DynamicResource SolidBorderBrush}"
                                    BorderThickness="1" />
                                <ScrollViewer
                                    Margin="4,6,4,6"
                                    CanContentScroll="True"
                                    HorizontalScrollBarVisibility="Auto"
                                    SnapsToDevicePixels="True"
                                    Style="{DynamicResource SimpleScrollViewer}"
                                    VerticalScrollBarVisibility="Auto">

                                    <!--  StackPanel используется для отображения дочерних элементов путем установки значения True в свойстве IsItemsHost  -->
                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />

                                </ScrollViewer>
                            </Grid>
                        </Popup>
                        <!--  Выключатель (ToggleButton) привязан к данным поля со списком (ComboBox) для переключения состояния IsDropDownOpen  -->
                        <ToggleButton
                            x:Name="ToggleButton"
                            Grid.Column="2"
                            ClickMode="Press"
                            Focusable="false"
                            IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                            Template="{DynamicResource ComboBoxToggleButton}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!--  Это обеспечивает минимальный размер раскрывающегося списка (DropDown), если он пуст  -->
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                        </Trigger>
                        <Trigger SourceName="Popup" Property="AllowsTransparency" Value="true">
                            <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="4" />
                            <Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0" />
                        </Trigger>
                        <Trigger Property="IsEditable" Value="true">
                            <Setter Property="IsTabStop" Value="false" />
                            <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
                            <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Простой элемент поля со списком (SimpleComboBoxItem) используется для каждого элемента в поле со списком (ComboBox). Можно изменить цвет выделения, используемый для каждого из перечисленных ниже элементов  -->
    <Style
        x:Key="SimpleComboBoxItem"
        d:IsControlPart="True"
        TargetType="{x:Type ComboBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Grid SnapsToDevicePixels="true">
                        <Border
                            x:Name="Border"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}" />
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Grid>
                    <ControlTemplate.Triggers>

                        <!--  Чтобы установить цвет выделения для элементов, следует изменить значение SelectedBackgroundBrush для свойства IsHighlighted  -->
                        <Trigger Property="IsHighlighted" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource SelectedBackgroundBrush}" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--
        Простой индикатор выполнения (SimpleProgressBar)
        В данном шаблоне используются два элемента управления Border для отображения дорожки (Track) и индикатора выполнения (Progress)
        Ограничения: поддерживается только индикатор выполнения (ProgressBar) в горизонтальном положении
    -->
    <Style x:Key="SimpleProgressBar" TargetType="{x:Type ProgressBar}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ProgressBar}">
                    <Grid>

                        <!--  Данный элемент управления Border — это дорожка. Ему должно быть присвоено имя PART_Track  -->
                        <Border
                            x:Name="PART_Track"
                            Background="{DynamicResource PressedBrush}"
                            BorderBrush="{DynamicResource SolidBorderBrush}"
                            BorderThickness="1"
                            CornerRadius="2" />

                        <!--  Данный элемент управления Border является индикатором хода выполнения. Для правильного функционирования элемента управления ему необходимо присвоить имя PART_Indicator  -->
                        <Border
                            x:Name="PART_Indicator"
                            HorizontalAlignment="Left"
                            Background="{DynamicResource MouseOverBrush}"
                            BorderBrush="{DynamicResource NormalBorderBrush}"
                            BorderThickness="1"
                            CornerRadius="2" />

                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Простое текстовое поле (SimpleTextBox)  -->
    <Style x:Key="SimpleTextBox" TargetType="{x:Type TextBox}">
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="AllowDrop" Value="true" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Grid>
                        <Border
                            x:Name="Border"
                            Padding="2"
                            Background="{DynamicResource WindowBackgroundBrush}"
                            BorderBrush="{DynamicResource SolidBorderBrush}"
                            BorderThickness="1"
                            CornerRadius="2">

                            <!--  Реализация помещает содержимое (Content) в область прокрутки (ScrollViewer). Для правильного функционирования этого элемента управления ему необходимо присвоить имя PART_ContentHost  -->
                            <ScrollViewer
                                x:Name="PART_ContentHost"
                                Margin="0"
                                Background="{TemplateBinding Background}"
                                Style="{DynamicResource SimpleScrollViewer}" />

                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DisabledBackgroundBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Простая подпись (SimpleLabel): данный шаблон — всего лишь средство отображения (ContentPresenter) содержимого подписи (Label)  -->
    <Style x:Key="SimpleLabel" TargetType="{x:Type Label}">
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Top" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Label}">
                    <Grid>
                        <ContentPresenter
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            RecognizesAccessKey="True" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false" />
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Простое меню (SimpleMenu): данный шаблон использует элемент управления StackPanel для размещения элементов меню (MenuItem)  -->
    <Style x:Key="SimpleMenu" TargetType="{x:Type Menu}">
        <Setter Property="Background" Value="{DynamicResource LightBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Menu}">
                    <Grid>
                        <Border
                            x:Name="Border"
                            Margin="1"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}" />
                        <StackPanel
                            Background="{TemplateBinding Background}"
                            ClipToBounds="True"
                            IsItemsHost="True"
                            Orientation="Horizontal" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Этот эффект BitmapEffect используется элементами простого меню (SimpleMenuItem)  -->
    <DropShadowBitmapEffect
        x:Key="PopupDropShadow"
        ShadowDepth="1.5"
        Softness="0.15" />

    <!--  Простой пункт меню (SimpleMenuItem): данный шаблон использует триггеры для обеспечения четырех различных способов размещения элементов меню, которые настраиваются с помощью свойства Role  -->
    <Style x:Key="SimpleMenuItem" TargetType="{x:Type MenuItem}">
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <Border
                        x:Name="Border"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid>

                            <!--
                                Сетка (Grid) используется для объединения столбцов значков (Icon), содержимого (Content), флажков (Glyph) и стрелок (Arrow) для отображения следующего уровня
                                Для выравнивания значков, содержимого и стрелок для каждого элемента меню (MenuItem) в сетке используются общие размеры
                            -->
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition
                                    Width="Auto"
                                    MinWidth="17"
                                    SharedSizeGroup="MenuItemIconColumnGroup" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup" />
                                <ColumnDefinition Width="14" />
                            </Grid.ColumnDefinitions>

                            <!--  Средство отображения ContentPresenter для отображения значка (Icon), если это необходимо  -->
                            <ContentPresenter
                                x:Name="Icon"
                                Margin="4,0,6,0"
                                VerticalAlignment="Center"
                                ContentSource="Icon" />

                            <!--  Glyph — это флажок, используемый в меню с флажками  -->
                            <Grid
                                x:Name="GlyphPanel"
                                Margin="4,0,6,0"
                                VerticalAlignment="Center"
                                Visibility="Hidden">
                                <Path
                                    x:Name="GlyphPanelpath"
                                    VerticalAlignment="Center"
                                    Data="M0,2 L0,4.8 L2.5,7.4 L7.1,2.8 L7.1,0 L2.5,4.6 z"
                                    Fill="{TemplateBinding Foreground}"
                                    FlowDirection="LeftToRight" />
                            </Grid>

                            <!--  Элемент управления Popup — это тело меню, которое развертывается вниз или вбок, в зависимости от уровня меню  -->
                            <Popup
                                x:Name="SubMenuPopup"
                                AllowsTransparency="true"
                                Focusable="false"
                                IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}"
                                Placement="Right"
                                PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                                VerticalOffset="-3">
                                <Grid x:Name="SubMenu">
                                    <Border
                                        x:Name="SubMenuBorder"
                                        Background="{DynamicResource WindowBackgroundBrush}"
                                        BorderBrush="{DynamicResource SolidBorderBrush}"
                                        BorderThickness="1" />

                                    <!--  Элемент управления StackPanel содержит дочерние элементы меню. Он настраивается путем установки значения свойства IsItemsHost=True  -->
                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                                </Grid>
                            </Popup>

                            <!--  Содержимое для текста меню и пр.  -->
                            <ContentPresenter
                                x:Name="HeaderHost"
                                Grid.Column="1"
                                Margin="{TemplateBinding Padding}"
                                ContentSource="Header"
                                RecognizesAccessKey="True" />

                            <!--  Завершающаяся стрелкой линия, указывающая на следующий уровень меню  -->
                            <Grid
                                x:Name="ArrowPanel"
                                Grid.Column="3"
                                Margin="4,0,6,0"
                                VerticalAlignment="Center">
                                <Path
                                    x:Name="ArrowPanelPath"
                                    VerticalAlignment="Center"
                                    Data="M0,0 L0,8 L4,4 z"
                                    Fill="{TemplateBinding Foreground}" />
                            </Grid>

                        </Grid>
                    </Border>

                    <!--  Перечисленные ниже триггеры повторно настраивают четыре способа размещения элементов меню (MenuItem) для отображения различных уровней меню посредством свойства Role  -->
                    <ControlTemplate.Triggers>

                        <!--  Role = TopLevelHeader: это корневой элемент меню; элемент управления Popup разворачивается вниз  -->
                        <Trigger Property="Role" Value="TopLevelHeader">
                            <Setter Property="Margin" Value="0,1,0,1" />
                            <Setter Property="Padding" Value="6,3,6,3" />
                            <Setter Property="Grid.IsSharedSizeScope" Value="true" />
                            <Setter TargetName="SubMenuPopup" Property="Placement" Value="Bottom" />
                            <Setter TargetName="ArrowPanel" Property="Visibility" Value="Collapsed" />
                        </Trigger>

                        <!--  Role = TopLevelItem: это дочерний элемент верхнего уровня меню без дочерних элементов  -->
                        <Trigger Property="Role" Value="TopLevelItem">
                            <Setter Property="Margin" Value="0,1,0,1" />
                            <Setter Property="Padding" Value="6,3,6,3" />
                            <Setter TargetName="ArrowPanel" Property="Visibility" Value="Collapsed" />
                        </Trigger>

                        <!--  Role = SubMenuHeader: это дочерний элемент меню, у которого нет дочерних элементов  -->
                        <Trigger Property="Role" Value="SubmenuHeader">
                            <Setter Property="DockPanel.Dock" Value="Top" />
                            <Setter Property="Padding" Value="0,2,0,2" />
                            <Setter Property="Grid.IsSharedSizeScope" Value="true" />
                        </Trigger>

                        <!--  Role = SubMenuItem: это дочерний элемент меню, у которого имеются дочерние элементы  -->
                        <Trigger Property="Role" Value="SubmenuItem">
                            <Setter Property="DockPanel.Dock" Value="Top" />
                            <Setter Property="Padding" Value="0,2,0,2" />
                            <Setter TargetName="ArrowPanel" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                            <Setter TargetName="SubMenuPopup" Property="PopupAnimation" Value="None" />
                        </Trigger>

                        <!--  Если значка (Icon) нет, содержимое значка свертывается  -->
                        <Trigger Property="Icon" Value="{x:Null}">
                            <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
                        </Trigger>

                        <!--  Элемент управления GlyphPanel содержит флажок (CheckMark)  -->
                        <Trigger Property="IsChecked" Value="true">
                            <Setter TargetName="GlyphPanel" Property="Visibility" Value="Visible" />
                            <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
                        </Trigger>

                        <Trigger SourceName="SubMenuPopup" Property="AllowsTransparency" Value="true">
                            <Setter TargetName="SubMenu" Property="Margin" Value="0,0,3,3" />
                            <Setter TargetName="SubMenu" Property="SnapsToDevicePixels" Value="true" />
                            <Setter TargetName="SubMenuBorder" Property="BitmapEffect" Value="{DynamicResource PopupDropShadow}" />
                        </Trigger>

                        <!--  Использование системных цветов для событий выделения (IsHighlighted) и изменения состояния (IsEnabled) меню  -->
                        <Trigger Property="IsHighlighted" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Простой разделитель (SimpleSeparator): этот шаблон используется для создания разделителя (Separator) в меню  -->
    <Style x:Key="SimpleSeparator" TargetType="{x:Type Separator}">
        <Setter Property="Height" Value="1" />
        <Setter Property="Margin" Value="0,2,0,2" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Border BorderBrush="{DynamicResource SolidBorderBrush}" BorderThickness="1" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--
        Простой набор вкладок (SimpleTabControl)
        Этот шаблон используется простой элемент вкладки (SimpleTabItem) для каждой вкладки. Элементы вкладок помещаются на панель вкладок (TabPanel)
        Ограничения: Простой набор вкладок позволяет отображать вкладки только вверху набора вкладок. Чтобы изменить это, можно изменить положение панели вкладок
    -->

    <Style x:Key="SimpleTabControl" TargetType="{x:Type TabControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabControl}">
                    <Grid KeyboardNavigation.TabNavigation="Local">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>

                        <!--
                            Панель вкладок - это контейнер макета, обеспечивающий перенос элементов вкладок на следующую строку и изменение их порядка при выборе
                            Использование этого элемента управления в реализации определяется значением свойства IsItemsHost = True
                        -->
                        <TabPanel
                            x:Name="HeaderPanel"
                            Grid.Row="0"
                            Margin="0,0,4,-1"
                            Panel.ZIndex="1"
                            Background="Transparent"
                            IsItemsHost="True"
                            KeyboardNavigation.TabIndex="1" />

                        <Border
                            x:Name="Border"
                            Grid.Row="1"
                            Background="{DynamicResource WindowBackgroundBrush}"
                            BorderBrush="{DynamicResource SolidBorderBrush}"
                            BorderThickness="1"
                            CornerRadius="2"
                            KeyboardNavigation.DirectionalNavigation="Contained"
                            KeyboardNavigation.TabIndex="2"
                            KeyboardNavigation.TabNavigation="Local">

                            <!--  Реализация переключает содержимое. Этому элементу управления должно быть присвоено имя PART_SelectedContentHost  -->
                            <ContentPresenter
                                x:Name="PART_SelectedContentHost"
                                Margin="4"
                                ContentSource="SelectedContent" />

                        </Border>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Простой элемент вкладки (SimpleTabItem)  -->
    <Style
        x:Key="SimpleTabItem"
        d:IsControlPart="True"
        TargetType="{x:Type TabItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Grid>
                        <Border
                            x:Name="Border"
                            Margin="0,0,-4,0"
                            Background="{DynamicResource LightBrush}"
                            BorderBrush="{DynamicResource SolidBorderBrush}"
                            BorderThickness="1,1,1,1"
                            CornerRadius="2,12,0,0">
                            <ContentPresenter
                                x:Name="ContentSite"
                                Margin="12,2,12,2"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                ContentSource="Header"
                                RecognizesAccessKey="True" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Panel.ZIndex" Value="100" />
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource WindowBackgroundBrush}" />
                            <Setter TargetName="Border" Property="BorderThickness" Value="1,1,1,0" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Простой ползунок (SimpleSliderThumb) — это перетаскиваемая часть ползунка (Slider)  -->
    <Style
        x:Key="SimpleSliderThumb"
        d:IsControlPart="True"
        TargetType="{x:Type Thumb}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="Height" Value="14" />
        <Setter Property="Width" Value="14" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Grid>
                        <Ellipse
                            x:Name="Ellipse"
                            Fill="{DynamicResource NormalBrush}"
                            Stroke="{DynamicResource NormalBorderBrush}"
                            StrokeThickness="1" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Ellipse" Property="Fill" Value="{DynamicResource MouseOverBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Ellipse" Property="Fill" Value="{DynamicResource DisabledBackgroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--
        Простая полоса ползунка (SimpleSlider)
        Аналогично полосе прокрутки (ScrollBar), в данном шаблоне используется дорожка (Track) для компоновки перетаскиваемого ползунка (Thumb) с кнопками повторения "Вверх" и "Вниз".
        В нем используются элементы управления SimpleSliderThumb и SimpleScrollRepeatButtonStyle для кнопок повторения "Страница вверх" и "Страница вниз"
    -->
    <Style x:Key="SimpleSlider" TargetType="{x:Type Slider}">
        <Setter Property="Background" Value="{DynamicResource LightBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Slider}">
                    <Grid x:Name="GridRoot">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" MinHeight="{TemplateBinding MinHeight}" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>

                        <!--  Элемент управления TickBar отображает шкалу для полосы ползунка (Slider)  -->
                        <TickBar
                            x:Name="TopTick"
                            Height="4"
                            Fill="{DynamicResource GlyphBrush}"
                            Placement="Top"
                            SnapsToDevicePixels="True"
                            Visibility="Collapsed" />
                        <Border
                            x:Name="Border"
                            Grid.Row="1"
                            Height="4"
                            Margin="0"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="2" />

                        <!--  На дорожке (Track) расположены кнопки повторения и ползунок  -->
                        <Track x:Name="PART_Track" Grid.Row="1">
                            <Track.Thumb>
                                <Thumb Style="{DynamicResource SimpleSliderThumb}" />
                            </Track.Thumb>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton Command="Slider.IncreaseLarge" Style="{DynamicResource SimpleScrollRepeatButtonStyle}" />
                            </Track.IncreaseRepeatButton>
                            <Track.DecreaseRepeatButton>
                                <RepeatButton Command="Slider.DecreaseLarge" Style="{DynamicResource SimpleScrollRepeatButtonStyle}" />
                            </Track.DecreaseRepeatButton>
                        </Track>

                        <TickBar
                            x:Name="BottomTick"
                            Grid.Row="2"
                            Height="4"
                            Fill="{TemplateBinding Foreground}"
                            Placement="Bottom"
                            SnapsToDevicePixels="True"
                            Visibility="Collapsed" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TickPlacement" Value="TopLeft">
                            <Setter TargetName="TopTick" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="TickPlacement" Value="BottomRight">
                            <Setter TargetName="BottomTick" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="TickPlacement" Value="Both">
                            <Setter TargetName="TopTick" Property="Visibility" Value="Visible" />
                            <Setter TargetName="BottomTick" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" />
                        </Trigger>

                        <!--  По умолчанию ползунок является горизонтальным (Horizontal); для создания вертикального (Vertical) ползунка используется поворот  -->
                        <Trigger Property="Orientation" Value="Vertical">
                            <Setter TargetName="GridRoot" Property="LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="-90" />
                                </Setter.Value>
                            </Setter>
                            <!--  Дорожка (Track) поворачивается в зависимости от ориентации, поэтому ее нужно явным образом возвращать в прежнее положение  -->
                            <Setter TargetName="PART_Track" Property="Orientation" Value="Horizontal" />
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  В простом представлении в виде дерева (SimpleTreeView) располагаются элементы представления в виде дерева (TreeViewItem) внутри области с прокруткой (ScrollViewer)  -->
    <Style x:Key="SimpleTreeView" TargetType="{x:Type TreeView}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeView}">
                    <Grid>
                        <Border
                            x:Name="Border"
                            Background="{DynamicResource WindowBackgroundBrush}"
                            BorderBrush="{DynamicResource SolidBorderBrush}"
                            BorderThickness="1"
                            CornerRadius="1">
                            <ScrollViewer
                                Padding="4"
                                Background="{TemplateBinding Background}"
                                CanContentScroll="False"
                                Focusable="False"
                                HorizontalScrollBarVisibility="Auto"
                                Style="{DynamicResource SimpleScrollViewer}"
                                VerticalScrollBarVisibility="Auto">
                                <ItemsPresenter />
                            </ScrollViewer>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Простой выключатель элементов представления в виде дерева (SimpleTreeViewItemToggleButton) — кнопки "+" и "-" для развертывания и свертывания элемента представления в виде дерева (TreeViewItem)  -->
    <Style
        x:Key="SimpleTreeViewItemToggleButton"
        d:IsControlPart="True"
        TargetType="{x:Type ToggleButton}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid
                        Width="15"
                        Height="13"
                        Background="Transparent">
                        <Path
                            x:Name="IsExpandedPath"
                            Margin="1,1,1,1"
                            HorizontalAlignment="Left"
                            VerticalAlignment="Center"
                            Data="M 0 4 L 8 4 L 4 8 Z"
                            Fill="{DynamicResource GlyphBrush}"
                            Visibility="Collapsed" />
                        <Path
                            x:Name="ExpandPath"
                            Margin="1,1,1,1"
                            HorizontalAlignment="Left"
                            VerticalAlignment="Center"
                            Data="M 4 0 L 8 4 L 4 8 Z"
                            Fill="{DynamicResource GlyphBrush}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="IsExpandedPath" Property="Visibility" Value="Visible" />
                            <Setter TargetName="ExpandPath" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Простой элемент представления в виде дерева (SimpleTreeViewItem) — в шаблоне TreeViewItem есть заголовок, в котором отображается элемент (Item) и тело (Body), являющееся элементом управления ItemsHost; этот элемент управления разворачивается для отображения дочерних элементов  -->
    <Style
        x:Key="SimpleTreeViewItem"
        d:IsControlPart="True"
        TargetType="{x:Type TreeViewItem}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="Padding" Value="1,0,0,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" MinWidth="19" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition />
                        </Grid.RowDefinitions>
                        <ToggleButton
                            x:Name="Expander"
                            ClickMode="Press"
                            IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                            Style="{DynamicResource SimpleTreeViewItemToggleButton}" />
                        <Border
                            x:Name="Selection_Border"
                            Grid.Column="1"
                            Padding="{TemplateBinding Padding}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                            <ContentPresenter
                                x:Name="PART_Header"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                ContentSource="Header" />
                        </Border>
                        <ItemsPresenter
                            x:Name="ItemsHost"
                            Grid.Row="1"
                            Grid.Column="1"
                            Grid.ColumnSpan="2" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="false">
                            <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="Expander" Property="Visibility" Value="Hidden" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter TargetName="Selection_Border" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true" />
                                <Condition Property="IsSelectionActive" Value="false" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Selection_Border" Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ContentPresenterStyle1" TargetType="{x:Type ContentPresenter}" />
    <ControlTemplate x:Key="ScrollWithoutBorderTemplate" TargetType="{x:Type ScrollViewer}">
        <Grid x:Name="Grid" Background="{TemplateBinding Background}">
            <Grid.Resources>
                <system:Double x:Key="{x:Static SystemParameters.VerticalScrollBarWidthKey}">14</system:Double>
                <SolidColorBrush x:Key="MouseOverBackground-Sketch" Color="#FFD2D2D2" />
                <SolidColorBrush x:Key="FocusedBorder-Sketch" Color="Black" />
                <Style x:Key="Thumb-Sketch" TargetType="{x:Type Thumb}">
                    <Setter Property="SnapsToDevicePixels" Value="True" />
                    <Setter Property="Height" Value="16" />
                    <Setter Property="Width" Value="16" />
                    <Setter Property="Foreground" Value="#FF606060" />
                    <Setter Property="BorderBrush" Value="#FF606060" />
                    <Setter Property="Background" Value="White" />
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type Thumb}">
                                <Grid>
                                    <pc:SketchRectangleUC
                                        x:Name="SketchRectangleUC"
                                        Background="{TemplateBinding Background}"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        ExtensionLength="0"
                                        ExtensionVariance="0"
                                        Foreground="{TemplateBinding Foreground}"
                                        SegmentLength="3"
                                        SegmentOffset="0.12"
                                        StrokeWidth="2">
                                        <pc:SketchRectangleUC.DrawPath>
                                            <Path Data="" />
                                        </pc:SketchRectangleUC.DrawPath>
                                    </pc:SketchRectangleUC>
                                </Grid>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsFocused" Value="True">
                                        <Setter TargetName="SketchRectangleUC" Property="BorderBrush" Value="{DynamicResource FocusedBorder-Sketch}" />
                                    </Trigger>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter TargetName="SketchRectangleUC" Property="Background" Value="{DynamicResource MouseOverBackground-Sketch}" />
                                    </Trigger>
                                    <Trigger Property="IsDragging" Value="True">
                                        <Setter TargetName="SketchRectangleUC" Property="MinHeight" Value="20" />
                                        <Setter TargetName="SketchRectangleUC" Property="Background" Value="{DynamicResource BaseBorder-Sketch}" />
                                    </Trigger>
                                    <Trigger Property="IsEnabled" Value="False">
                                        <Setter TargetName="SketchRectangleUC" Property="Background" Value="{DynamicResource BaseBackground-Sketch}" />
                                        <Setter TargetName="SketchRectangleUC" Property="BorderBrush" Value="{DynamicResource DisabledBorder-Sketch}" />
                                        <Setter TargetName="SketchRectangleUC" Property="SegmentVariance" Value="0.1" />
                                        <Setter TargetName="SketchRectangleUC" Property="SegmentOffset" Value="0.15" />
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
                <SolidColorBrush x:Key="BaseForeground-Sketch" Color="#FF606060" />
                <SolidColorBrush x:Key="SelectedBackground-Sketch" Color="#FFAFAFAF" />
                <Style x:Key="RepeatButton-Sketch" TargetType="{x:Type RepeatButton}">
                    <Setter Property="FontFamily" Value="./#Segoe Print" />
                    <Setter Property="FontSize" Value="13" />
                    <Setter Property="Foreground" Value="{DynamicResource BaseForeground-Sketch}" />
                    <Setter Property="BorderBrush" Value="#FF606060" />
                    <Setter Property="Background" Value="White" />
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type RepeatButton}">
                                <Grid x:Name="Grid">
                                    <pc:SketchRectangleUC
                                        x:Name="SketchRectangleUC"
                                        Background="{TemplateBinding Background}"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        Foreground="{TemplateBinding Foreground}"
                                        SegmentLength="4"
                                        SegmentOffset="0.15"
                                        SegmentVariance="0.1"
                                        StrokeWidth="2">
                                        <pc:SketchRectangleUC.DrawPath>
                                            <Path Data="" />
                                        </pc:SketchRectangleUC.DrawPath>
                                    </pc:SketchRectangleUC>
                                    <Path
                                        x:Name="path"
                                        Width="10"
                                        Height="6"
                                        HorizontalAlignment="Center"
                                        VerticalAlignment="Center"
                                        Data="M50.25,19.5L55,12 60.25,19.75"
                                        Fill="{x:Null}"
                                        Stretch="Fill"
                                        Stroke="{TemplateBinding BorderBrush}"
                                        StrokeThickness="2" />
                                </Grid>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsFocused" Value="True">
                                        <Setter TargetName="SketchRectangleUC" Property="BorderBrush" Value="{DynamicResource FocusedBorder-Sketch}" />
                                    </Trigger>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter TargetName="SketchRectangleUC" Property="Background" Value="{DynamicResource MouseOverBackground-Sketch}" />
                                    </Trigger>
                                    <Trigger Property="IsPressed" Value="True">
                                        <Setter TargetName="SketchRectangleUC" Property="Background" Value="{DynamicResource BaseBorder-Sketch}" />
                                        <Setter TargetName="path" Property="Stroke" Value="{DynamicResource PressedBackground-Sketch}" />
                                    </Trigger>
                                    <Trigger Property="IsEnabled" Value="True" />
                                    <Trigger Property="IsEnabled" Value="False">
                                        <Setter TargetName="path" Property="Stroke" Value="{DynamicResource MouseOverBackground-Sketch}" />
                                        <Setter TargetName="SketchRectangleUC" Property="Background" Value="{DynamicResource BaseBackground-Sketch}" />
                                        <Setter TargetName="SketchRectangleUC" Property="BorderBrush" Value="{DynamicResource DisabledBorder-Sketch}" />
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
                <SolidColorBrush x:Key="DisabledForeground-Sketch" Color="#FF9F9F9F" />
                <SolidColorBrush x:Key="DisabledBackground-Sketch" Color="#FFD8D8D8" />
                <SolidColorBrush x:Key="DisabledBorder-Sketch" Color="#FF9F9F9F" />
                <Style x:Key="ScrollRepeatButton-Sketch" TargetType="{x:Type RepeatButton}">
                    <Setter Property="Foreground" Value="#FF606060" />
                    <Setter Property="BorderBrush" Value="#FF606060" />
                    <Setter Property="Background" Value="White" />
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type RepeatButton}">
                                <Grid x:Name="Grid" Background="#00000000" />
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsKeyboardFocused" Value="True" />
                                    <Trigger Property="IsMouseOver" Value="True" />
                                    <Trigger Property="IsPressed" Value="True" />
                                    <Trigger Property="IsEnabled" Value="True" />
                                    <Trigger Property="IsEnabled" Value="False" />
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
                <SolidColorBrush x:Key="BaseBorder-Sketch" Color="#FF606060" />
                <SolidColorBrush x:Key="BaseBackground-Sketch" Color="White" />
                <SolidColorBrush x:Key="PressedBackground-Sketch" Color="#FF959595" />
                <Style x:Key="ScrollBar-Sketch" TargetType="{x:Type ScrollBar}">
                    <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
                    <Setter Property="Foreground" Value="#FF606060" />
                    <Setter Property="BorderBrush" Value="#FF606060" />
                    <Setter Property="Background" Value="White" />
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type ScrollBar}">
                                <Grid x:Name="GridRoot">
                                    <Grid.RowDefinitions>
                                        <RowDefinition MaxHeight="18" />
                                        <RowDefinition Height="1E-05*" />
                                        <RowDefinition MaxHeight="18" />
                                    </Grid.RowDefinitions>
                                    <Grid>
                                        <RepeatButton
                                            x:Name="DecreaseRepeat"
                                            Background="{TemplateBinding Background}"
                                            BorderBrush="{TemplateBinding BorderBrush}"
                                            Command="ScrollBar.LineUpCommand"
                                            FocusVisualStyle="{DynamicResource FocusControl-Sketch}"
                                            Foreground="{TemplateBinding Foreground}">
                                            <RepeatButton.Style>
                                                <Style TargetType="{x:Type RepeatButton}">
                                                    <Setter Property="FontFamily" Value="./#Segoe Print" />
                                                    <Setter Property="FontSize" Value="13" />
                                                    <Setter Property="Foreground" Value="{DynamicResource BaseForeground-Sketch}" />
                                                    <Setter Property="BorderBrush" Value="#FF606060" />
                                                    <Setter Property="Background" Value="White" />
                                                    <Setter Property="Template">
                                                        <Setter.Value>
                                                            <ControlTemplate TargetType="{x:Type RepeatButton}">
                                                                <Grid x:Name="Grid">
                                                                    <pc:SketchRectangleUC
                                                                        x:Name="SketchRectangleUC"
                                                                        Background="{TemplateBinding Background}"
                                                                        BorderBrush="{TemplateBinding BorderBrush}"
                                                                        Foreground="{TemplateBinding Foreground}"
                                                                        SegmentLength="4"
                                                                        SegmentOffset="0.15"
                                                                        SegmentVariance="0.1"
                                                                        StrokeWidth="2">
                                                                        <pc:SketchRectangleUC.DrawPath>
                                                                            <Path Data="" />
                                                                        </pc:SketchRectangleUC.DrawPath>
                                                                    </pc:SketchRectangleUC>
                                                                    <Path
                                                                        x:Name="path"
                                                                        Width="10"
                                                                        Height="6"
                                                                        HorizontalAlignment="Center"
                                                                        VerticalAlignment="Center"
                                                                        Data="M50.25,19.5L55,12 60.25,19.75"
                                                                        Fill="{x:Null}"
                                                                        Stretch="Fill"
                                                                        Stroke="{TemplateBinding BorderBrush}"
                                                                        StrokeThickness="2" />
                                                                </Grid>
                                                                <ControlTemplate.Triggers>
                                                                    <Trigger Property="IsFocused" Value="True">
                                                                        <Setter TargetName="SketchRectangleUC" Property="BorderBrush" Value="{DynamicResource FocusedBorder-Sketch}" />
                                                                    </Trigger>
                                                                    <Trigger Property="IsMouseOver" Value="True">
                                                                        <Setter TargetName="SketchRectangleUC" Property="Background" Value="{DynamicResource MouseOverBackground-Sketch}" />
                                                                    </Trigger>
                                                                    <Trigger Property="IsPressed" Value="True">
                                                                        <Setter TargetName="SketchRectangleUC" Property="Background" Value="{DynamicResource BaseBorder-Sketch}" />
                                                                        <Setter TargetName="path" Property="Stroke" Value="{DynamicResource PressedBackground-Sketch}" />
                                                                    </Trigger>
                                                                    <Trigger Property="IsEnabled" Value="True" />
                                                                    <Trigger Property="IsEnabled" Value="False">
                                                                        <Setter TargetName="path" Property="Stroke" Value="{DynamicResource MouseOverBackground-Sketch}" />
                                                                        <Setter TargetName="SketchRectangleUC" Property="Background" Value="{DynamicResource BaseBackground-Sketch}" />
                                                                        <Setter TargetName="SketchRectangleUC" Property="BorderBrush" Value="{DynamicResource DisabledBorder-Sketch}" />
                                                                    </Trigger>
                                                                </ControlTemplate.Triggers>
                                                            </ControlTemplate>
                                                        </Setter.Value>
                                                    </Setter>
                                                </Style>
                                            </RepeatButton.Style>
                                        </RepeatButton>
                                    </Grid>
                                    <pc:SketchRectangleUC
                                        Grid.RowSpan="3"
                                        Grid.ColumnSpan="1"
                                        HorizontalAlignment="Stretch"
                                        VerticalAlignment="Stretch"
                                        Background="{x:Null}"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        Foreground="{TemplateBinding Foreground}"
                                        StrokeWidth="2">
                                        <pc:SketchRectangleUC.DrawPath>
                                            <Path Data="" />
                                        </pc:SketchRectangleUC.DrawPath>
                                    </pc:SketchRectangleUC>
                                    <Track
                                        x:Name="PART_Track"
                                        Grid.Row="1"
                                        IsDirectionReversed="True"
                                        Orientation="Vertical">
                                        <Track.DecreaseRepeatButton>
                                            <RepeatButton
                                                x:Name="PageDown"
                                                Background="{TemplateBinding Background}"
                                                BorderBrush="{TemplateBinding BorderBrush}"
                                                Command="ScrollBar.PageUpCommand"
                                                FocusVisualStyle="{DynamicResource FocusControl-Sketch}"
                                                Foreground="{TemplateBinding Foreground}">
                                                <RepeatButton.Style>
                                                    <Style TargetType="{x:Type RepeatButton}">
                                                        <Setter Property="Foreground" Value="#FF606060" />
                                                        <Setter Property="BorderBrush" Value="#FF606060" />
                                                        <Setter Property="Background" Value="White" />
                                                        <Setter Property="Template">
                                                            <Setter.Value>
                                                                <ControlTemplate TargetType="{x:Type RepeatButton}">
                                                                    <Grid x:Name="Grid" Background="#00000000" />
                                                                    <ControlTemplate.Triggers>
                                                                        <Trigger Property="IsKeyboardFocused" Value="True" />
                                                                        <Trigger Property="IsMouseOver" Value="True" />
                                                                        <Trigger Property="IsPressed" Value="True" />
                                                                        <Trigger Property="IsEnabled" Value="True" />
                                                                        <Trigger Property="IsEnabled" Value="False" />
                                                                    </ControlTemplate.Triggers>
                                                                </ControlTemplate>
                                                            </Setter.Value>
                                                        </Setter>
                                                    </Style>
                                                </RepeatButton.Style>
                                            </RepeatButton>
                                        </Track.DecreaseRepeatButton>
                                        <Track.IncreaseRepeatButton>
                                            <RepeatButton
                                                x:Name="PageUp"
                                                Background="{TemplateBinding Background}"
                                                BorderBrush="{TemplateBinding BorderBrush}"
                                                Command="ScrollBar.PageDownCommand"
                                                FocusVisualStyle="{DynamicResource FocusControl-Sketch}"
                                                Foreground="{TemplateBinding Foreground}">
                                                <RepeatButton.Style>
                                                    <Style TargetType="{x:Type RepeatButton}">
                                                        <Setter Property="Foreground" Value="#FF606060" />
                                                        <Setter Property="BorderBrush" Value="#FF606060" />
                                                        <Setter Property="Background" Value="White" />
                                                        <Setter Property="Template">
                                                            <Setter.Value>
                                                                <ControlTemplate TargetType="{x:Type RepeatButton}">
                                                                    <Grid x:Name="Grid" Background="#00000000" />
                                                                    <ControlTemplate.Triggers>
                                                                        <Trigger Property="IsKeyboardFocused" Value="True" />
                                                                        <Trigger Property="IsMouseOver" Value="True" />
                                                                        <Trigger Property="IsPressed" Value="True" />
                                                                        <Trigger Property="IsEnabled" Value="True" />
                                                                        <Trigger Property="IsEnabled" Value="False" />
                                                                    </ControlTemplate.Triggers>
                                                                </ControlTemplate>
                                                            </Setter.Value>
                                                        </Setter>
                                                    </Style>
                                                </RepeatButton.Style>
                                            </RepeatButton>
                                        </Track.IncreaseRepeatButton>
                                        <Track.Thumb>
                                            <Thumb
                                                Width="Auto"
                                                Height="Auto"
                                                Background="{TemplateBinding Background}"
                                                BorderBrush="{TemplateBinding BorderBrush}"
                                                Foreground="{TemplateBinding Foreground}">
                                                <Thumb.Style>
                                                    <Style TargetType="{x:Type Thumb}">
                                                        <Setter Property="SnapsToDevicePixels" Value="True" />
                                                        <Setter Property="Height" Value="16" />
                                                        <Setter Property="Width" Value="16" />
                                                        <Setter Property="Foreground" Value="#FF606060" />
                                                        <Setter Property="BorderBrush" Value="#FF606060" />
                                                        <Setter Property="Background" Value="White" />
                                                        <Setter Property="Template">
                                                            <Setter.Value>
                                                                <ControlTemplate TargetType="{x:Type Thumb}">
                                                                    <Grid>
                                                                        <pc:SketchRectangleUC
                                                                            x:Name="SketchRectangleUC"
                                                                            Background="{TemplateBinding Background}"
                                                                            BorderBrush="{TemplateBinding BorderBrush}"
                                                                            ExtensionLength="0"
                                                                            ExtensionVariance="0"
                                                                            Foreground="{TemplateBinding Foreground}"
                                                                            SegmentLength="3"
                                                                            SegmentOffset="0.12"
                                                                            StrokeWidth="2">
                                                                            <pc:SketchRectangleUC.DrawPath>
                                                                                <Path Data="" />
                                                                            </pc:SketchRectangleUC.DrawPath>
                                                                        </pc:SketchRectangleUC>
                                                                    </Grid>
                                                                    <ControlTemplate.Triggers>
                                                                        <Trigger Property="IsFocused" Value="True">
                                                                            <Setter TargetName="SketchRectangleUC" Property="BorderBrush" Value="{DynamicResource FocusedBorder-Sketch}" />
                                                                        </Trigger>
                                                                        <Trigger Property="IsMouseOver" Value="True">
                                                                            <Setter TargetName="SketchRectangleUC" Property="Background" Value="{DynamicResource MouseOverBackground-Sketch}" />
                                                                        </Trigger>
                                                                        <Trigger Property="IsDragging" Value="True">
                                                                            <Setter TargetName="SketchRectangleUC" Property="MinHeight" Value="20" />
                                                                            <Setter TargetName="SketchRectangleUC" Property="Background" Value="{DynamicResource BaseBorder-Sketch}" />
                                                                        </Trigger>
                                                                        <Trigger Property="IsEnabled" Value="False">
                                                                            <Setter TargetName="SketchRectangleUC" Property="Background" Value="{DynamicResource BaseBackground-Sketch}" />
                                                                            <Setter TargetName="SketchRectangleUC" Property="BorderBrush" Value="{DynamicResource DisabledBorder-Sketch}" />
                                                                            <Setter TargetName="SketchRectangleUC" Property="SegmentVariance" Value="0.1" />
                                                                            <Setter TargetName="SketchRectangleUC" Property="SegmentOffset" Value="0.15" />
                                                                        </Trigger>
                                                                    </ControlTemplate.Triggers>
                                                                </ControlTemplate>
                                                            </Setter.Value>
                                                        </Setter>
                                                    </Style>
                                                </Thumb.Style>
                                            </Thumb>
                                        </Track.Thumb>
                                    </Track>
                                    <Grid Grid.Row="2">
                                        <RepeatButton
                                            x:Name="IncreaseRepeat"
                                            Background="{TemplateBinding Background}"
                                            BorderBrush="{TemplateBinding BorderBrush}"
                                            Command="ScrollBar.LineDownCommand"
                                            FocusVisualStyle="{DynamicResource FocusControl-Sketch}"
                                            Foreground="{TemplateBinding Foreground}"
                                            RenderTransformOrigin="0.5,0.5">
                                            <RepeatButton.RenderTransform>
                                                <TransformGroup>
                                                    <ScaleTransform ScaleX="1" ScaleY="-1" />
                                                    <SkewTransform AngleX="0" AngleY="0" />
                                                    <RotateTransform Angle="0" />
                                                    <TranslateTransform X="0" Y="0" />
                                                </TransformGroup>
                                            </RepeatButton.RenderTransform>
                                            <RepeatButton.Style>
                                                <Style TargetType="{x:Type RepeatButton}">
                                                    <Setter Property="FontFamily" Value="./#Segoe Print" />
                                                    <Setter Property="FontSize" Value="13" />
                                                    <Setter Property="Foreground" Value="{DynamicResource BaseForeground-Sketch}" />
                                                    <Setter Property="BorderBrush" Value="#FF606060" />
                                                    <Setter Property="Background" Value="White" />
                                                    <Setter Property="Template">
                                                        <Setter.Value>
                                                            <ControlTemplate TargetType="{x:Type RepeatButton}">
                                                                <Grid x:Name="Grid">
                                                                    <pc:SketchRectangleUC
                                                                        x:Name="SketchRectangleUC"
                                                                        Background="{TemplateBinding Background}"
                                                                        BorderBrush="{TemplateBinding BorderBrush}"
                                                                        Foreground="{TemplateBinding Foreground}"
                                                                        SegmentLength="4"
                                                                        SegmentOffset="0.15"
                                                                        SegmentVariance="0.1"
                                                                        StrokeWidth="2">
                                                                        <pc:SketchRectangleUC.DrawPath>
                                                                            <Path Data="" />
                                                                        </pc:SketchRectangleUC.DrawPath>
                                                                    </pc:SketchRectangleUC>
                                                                    <Path
                                                                        x:Name="path"
                                                                        Width="10"
                                                                        Height="6"
                                                                        HorizontalAlignment="Center"
                                                                        VerticalAlignment="Center"
                                                                        Data="M50.25,19.5L55,12 60.25,19.75"
                                                                        Fill="{x:Null}"
                                                                        Stretch="Fill"
                                                                        Stroke="{TemplateBinding BorderBrush}"
                                                                        StrokeThickness="2" />
                                                                </Grid>
                                                                <ControlTemplate.Triggers>
                                                                    <Trigger Property="IsFocused" Value="True">
                                                                        <Setter TargetName="SketchRectangleUC" Property="BorderBrush" Value="{DynamicResource FocusedBorder-Sketch}" />
                                                                    </Trigger>
                                                                    <Trigger Property="IsMouseOver" Value="True">
                                                                        <Setter TargetName="SketchRectangleUC" Property="Background" Value="{DynamicResource MouseOverBackground-Sketch}" />
                                                                    </Trigger>
                                                                    <Trigger Property="IsPressed" Value="True">
                                                                        <Setter TargetName="SketchRectangleUC" Property="Background" Value="{DynamicResource BaseBorder-Sketch}" />
                                                                        <Setter TargetName="path" Property="Stroke" Value="{DynamicResource PressedBackground-Sketch}" />
                                                                    </Trigger>
                                                                    <Trigger Property="IsEnabled" Value="True" />
                                                                    <Trigger Property="IsEnabled" Value="False">
                                                                        <Setter TargetName="path" Property="Stroke" Value="{DynamicResource MouseOverBackground-Sketch}" />
                                                                        <Setter TargetName="SketchRectangleUC" Property="Background" Value="{DynamicResource BaseBackground-Sketch}" />
                                                                        <Setter TargetName="SketchRectangleUC" Property="BorderBrush" Value="{DynamicResource DisabledBorder-Sketch}" />
                                                                    </Trigger>
                                                                </ControlTemplate.Triggers>
                                                            </ControlTemplate>
                                                        </Setter.Value>
                                                    </Setter>
                                                </Style>
                                            </RepeatButton.Style>
                                        </RepeatButton>
                                    </Grid>
                                </Grid>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="Orientation" Value="Horizontal">
                                        <Setter TargetName="GridRoot" Property="LayoutTransform">
                                            <Setter.Value>
                                                <RotateTransform Angle="-90" />
                                            </Setter.Value>
                                        </Setter>
                                        <Setter TargetName="PART_Track" Property="Orientation" Value="Vertical" />
                                        <Setter TargetName="DecreaseRepeat" Property="Command" Value="ScrollBar.LineLeftCommand" />
                                        <Setter TargetName="IncreaseRepeat" Property="Command" Value="ScrollBar.LineRightCommand" />
                                        <Setter TargetName="PageDown" Property="Command" Value="ScrollBar.PageLeftCommand" />
                                        <Setter TargetName="PageUp" Property="Command" Value="ScrollBar.PageRightCommand" />
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
                <SolidColorBrush x:Key="PressedForeground-Sketch" Color="#FF606060" />
            </Grid.Resources>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="15" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <pc:SketchRectangleUC
                Grid.RowSpan="2"
                Grid.ColumnSpan="2"
                HorizontalAlignment="Stretch"
                VerticalAlignment="Stretch"
                Background="{TemplateBinding Background}"
                BorderBrush="Transparent"
                Foreground="{TemplateBinding Foreground}"
                StrokeWidth="2">
                <pc:SketchRectangleUC.DrawPath>
                    <Path Data="" />
                </pc:SketchRectangleUC.DrawPath>
            </pc:SketchRectangleUC>
            <ScrollContentPresenter
                x:Name="PART_ScrollContentPresenter"
                Grid.Row="0"
                Grid.Column="0"
                Margin="{TemplateBinding Padding}"
                CanContentScroll="{TemplateBinding CanContentScroll}"
                CanHorizontallyScroll="False"
                CanVerticallyScroll="False"
                Content="{TemplateBinding Content}"
                ContentTemplate="{TemplateBinding ContentTemplate}" />
            <ScrollBar
                x:Name="PART_VerticalScrollBar"
                Grid.Row="0"
                Grid.Column="1"
                AutomationProperties.AutomationId="VerticalScrollBar"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                Cursor="Arrow"
                Foreground="{TemplateBinding Foreground}"
                Maximum="{TemplateBinding ScrollableHeight}"
                Minimum="0"
                Style="{DynamicResource ScrollBar-Sketch}"
                ViewportSize="{TemplateBinding ViewportHeight}"
                Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
            <ScrollBar
                x:Name="PART_HorizontalScrollBar"
                Grid.Row="1"
                Grid.Column="0"
                AutomationProperties.AutomationId="HorizontalScrollBar"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                Cursor="Arrow"
                Foreground="{TemplateBinding Foreground}"
                Maximum="{TemplateBinding ScrollableWidth}"
                Minimum="0"
                Orientation="Horizontal"
                Style="{DynamicResource ScrollBar-Sketch}"
                ViewportSize="{TemplateBinding ViewportWidth}"
                Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
                Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
        </Grid>
    </ControlTemplate>
</ResourceDictionary>
